$global-spacer-unit: 8;

@mixin breakpoint($point) {
    @if $point == "x-sm" {
        @media (min-width: 240px) { @content ; }
    }
    @else if $point == "sm" {
        @media (min-width: 640px) { @content ; }
    }
    @else if $point == "sm-portrait" {
        @media (min-width: 640px) and (orientation: portrait) { @content ; }
    }
    @else if $point == "md" {
        @media (min-width: 980px) { @content ; }
    }
    @else if $point == "md-portrait" {
        @media (min-width: 980px) and (orientation: portrait) { @content ; }
    }
    @else if $point == "lg" {
        @media (min-width: 1024px)  { @content ; }
    }
    @else if $point == "mid-lg" {
        @media (min-width: 1280px)  { @content ; }
    }
    @else if $point == "mid-lg-portrait" {
        @media screen and (max-width: 1023px) and (max-height: 1366px) and (orientation: portrait) { @content ; }
    }
    @else if $point == "xlg" {
        @media (min-width: 1500px)  { @content ; }
    }
}

/// Grid Layout
@mixin responsive-grid-layout($min-columns: 1, $min-width: 280px, $gap: 30px) {
	display: grid;
	grid-template-columns: repeat(auto-fit, minmax(#{$min-width}, 1fr));
	grid-gap: #{$gap};

	@include breakpoint(sm) {
	  grid-template-columns: repeat(#{$min-columns + 1}, minmax(#{$min-width}, 1fr));
	}

	@include breakpoint(md) {
	  grid-template-columns: repeat(#{$min-columns + 2}, minmax(#{$min-width}, 1fr));
	}

	@include breakpoint(lg) {
	  grid-template-columns: repeat(#{$min-columns + 3}, minmax(#{$min-width}, 1fr));
	}
}

@mixin true-max-height {
	max-height: 100vh;
	max-height: calc(var(--vh, 1vh) * 100);
}

@mixin true-min-height($percent : 100) {
	min-height: calc($percent * 1vh);
	min-height: calc(var(--vh, 1vh) * $percent);
}

@mixin true-height {
	height: 100vh;
	height: calc(var(--vh, 1vh) * 100);
}

@mixin alignfull {
	margin: 0 calc(50% - 50vw);
	max-width: 100vw;
	width: 100vw;
}

@mixin flexbox($direction, $justify, $align, $wrap) {
    display: flex;
    flex-direction: $direction;
    justify-content: $justify;
    align-items: $align;
    flex-wrap: $wrap;
}

@mixin grid($columns: 12, $gap: 1rem) {
	display: grid;
	grid-template-columns: repeat($columns, 1fr);
	grid-gap: $gap;
}

@mixin placeholder-text($color, $font-size, $font-family) {
	::placeholder {
	  color: $color;
	  font-size: $font-size;
	  font-family: $font-family;
	}
	:-ms-input-placeholder {
	  color: $color;
	  font-size: $font-size;
	  font-family: $font-family;
	}
	::-ms-input-placeholder {
	  color: $color;
	  font-size: $font-size;
	  font-family: $font-family;
	}
}

@mixin button {
	appearance: none;
	background: var(--global-primary-accent-colour);
	border: 1px solid var(--global-primary-accent-colour);
	border-radius: var(--global-border-radius);
	color: var(--global-primary-colour);
	cursor: pointer;
	font-size: 1.8rem;
	font-weight: 400;
	outline: none;
	margin: 0;
	padding: 12px 20px;
	text-transform: uppercase;
	transition:all .5s;

	&--secondary {
		background-color: var(--global-primary-colour);
		color: var(--global-primary-accent-colour);
	}

	&:hover {
		background-color:var(--global-secondary-accent-colour);
	}

	+ .button {
		margin-left: 2%;
	}

	&[style="display: none;"] {
		+ .button {
			margin-left: 0;
		}
	}
}


@mixin spacer($property: gap, $multiplier: 4) {
	#{$property}: #{$global-spacer-unit * $multiplier}px;
  }
  @mixin border($property : border, $width : 2, $colour : --global-primary-colour) {
	  #{$property}: #{$width}px solid var($colour);
  
  }

  @mixin default-transition($properties: all) {
    $transitions: (); // Create an empty list to store each transition

    @each $property in $properties {
        $transitions: append($transitions, #{$property} 0.3s ease-in-out, comma);
    }

    -webkit-transition: $transitions;
    -moz-transition: $transitions;
    transition: $transitions;
}

@mixin box-shadow($x : 0px, $y : 5px, $spread : 15px, $colour : rgba(0,0,0,0.2), $inset : false) {
	@if($inset != false) {
		box-shadow:$inset x $y $spread $colour;

	} @else {
		box-shadow:$x $y $spread $colour;

	}	
}

@mixin border-radius($tls : 1, $trs : -1, $brs : -1, $bls : -1) {
	$tl : #{$tls * $global-spacer-unit}px;
	$tr : $tl;
	$br : $tl;
	$bl : $tl;

	@if ($trs > -1) {
		$tr : #{$trs * $global-spacer-unit}px;
		$bl : #{$trs * $global-spacer-unit}px;
	}

	@if ($brs > -1) {
		$br : #{$brs * $global-spacer-unit}px;
	}

	@if ($bls > -1) {
		$bl : #{$bls * $global-spacer-unit}px;
	}

    -webkit-border-radius:$tl $tr $br $bl;
    -moz-border-radius:$tl $tr $br $bl;
    border-radius:$tl $tr $br $bl;
}